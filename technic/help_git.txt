https://teekhawat.com/%E0%B8%A7%E0%B8%B4%E0%B8%98%E0%B8%B5%E0%B9%83%E0%B8%8A%E0%B9%89%E0%B8%87%E0%B8%B2%E0%B8%99-git-%E0%B9%81%E0%B8%A5%E0%B8%B0%E0%B8%AD%E0%B8%B1%E0%B8%9E%E0%B9%84%E0%B8%9F%E0%B8%A5%E0%B9%8C%E0%B8%82/
ในการอัพโปรเจคลง repository เปิดโปรเจคผ่าน vs code เปิด termimnal พิม

// สร้างตัวเชื่อม
git init

// เตรียมไฟล์ขึ้น commit
git add .

// commit ขึ้น git
git commit -m "first commit"

// commit หัวข้อ และ เนื้อหา
git commit -m "Title" -m "Description ..........";

// กำหนดรูปแบบโปรเจคเป็น main
git branch -M main

// กำหนด url ที่จะเตรียม commit
git remote add origin https://github.com/chanomkaimook/ecommerce.git

==============================
** เพิ่มเติม หากต้องการเคลีย url ที่ remote 
or: git remote add [-t <branch>] [-m <master>] [-f] [--tags | --no-tags] [--mirror=<fetch|push>] <name> <url>
   or: git remote rename <old> <new>
   or: git remote set-head <name> (-a | --auto | -d | --delete | <branch>)
   or: git remote [-v | --verbose] show [-n] <name>
   or: git remote [-v | --verbose] update [-p | --prune] [(<group> | <remote>)...]
   or: git remote get-url [--push] [--all] <name>
   or: git remote set-url [--push] <name> <newurl> [<oldurl>]
   or: git remote set-url --add <name> <newurl>
   or: git remote set-url --delete <name> <url>
==============================

// อัพขึ้น git
git push -f origin main

// **  อัพขึ้น git -u คืออัพเข้า master เลย (ไม่เเนะนำ)
git push -u origin main

==============================
ปัญหาเวลาอัพโหลดงานไม่ผ่าน

// check branch return * main
git branch

// remote should return null 
git remote -v

// if git remote -v return value ให้ล้างค่ารีโมทออกให้หมด
// origin  main (fetch)
// origin  main (push)
git remote remove ชื่อที่รีโมท(origin)

// ตั้งค่า remote ใหม่
git remote add origin https://github.com/chanomkaimook/workshop.git

// ลอง push
git push -f origin main
================================================
syntax ต่างๆ
git init		= เป็นคำสั่งที่มีไว้ใช้งานที่โฟลเดอร์งานนั้นเช่น
git status		= ใช้สำหรับตรวจสอบว่ามีไฟล์ไหนที่ยังไม่ได้ add หรือมีการเปลี่ยนแปลงแล้วยังไม่ถูกจัดการบ้าง
git add			= ใช้สำหรับเพิ่มไฟล์เข้าไปใน stage (เป็นการระบุว่าต้องการที่จะสร้างความเปลี่ยนแปลงไฟล์ไหนใน git บ้าง) เช่น
git reset		= เป็นการย้อน version ไฟล์ให้กลับไปอยู่ในสภาพเดิมก่อนที่จะ add ไฟล์เข้าสู่ stage
git fetch		= ใช้ตรวจสอบว่าไฟล์ ในlocal กับremote มีความแตกต่างกันหรือไม่ ไฟล์ไหนใหม่กว่า หรือล้าสมัยอยู่กี่ commit 
(ซึ่งตรงนี้ comment จะช่วยเราได้มากว่า commit นี้เราทำอะไรลงไป เพราะฉะนั้นควร comment อยู่เสมอและต้องเขียนให้สื่อความหมาย)

git checkout my_new_branch
- เพื่อย้าย branch ไปที่ my_new_branch 

git branch --delete som_branch_to_delete
- ลบ branch som_branch_to_delete

หากว่าrepo มีการเปลี่ยนแปลง จาก local (ต้อง fetch เพื่อยืนยันว่าจะอัพเดตการเปลี่ยนแปลงหรือไม่) แล้วเกิดปัญหา merge ไม่ผ่าน ให้เคลีย
git merge --abort # The unresolved conflict will be cleared off
================================================
start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

   เชื่อมกับโปรเจค
   1.เปิดโฟลเดอร์โปรเจคด้วย Command Line
   2.ใช้คำสั่ง git status เพื่อเช็คสถานะของโปรเจค
   3.ใช้คำสั่ง git init ถ้ายังไม่มี git คุมโปรเจคของเรา
   4.ใช้คำสั่ง git add --all เพื่อเพิ่มไฟล์ที่เข้าสถานะ Change ทั้งหมดเป็น Staged
   5.ใช้คำสั่ง git commit -m "First commit" เพื่อสั่ง commit ไฟล์ทั้งหมดใน Staged

   กำหนด remote ให้ โปรเจคที่ต้องการเชื่อม
   
   1.ใช้คำสั่ง git remote add origin [remote repository URL]  โดยให้แทนที่ remote repository URL เป็น URL ของ Repository บน Github ที่เราสร้างไว้
   2.ใช้คำสั่ง git remote -v เพื่อเช็คสถานะ
   3.ให้คำสั่ง git push -u origin master เพื่อส่งไฟล์ที่ Commit แล้วในโปรเจคขึ้น Github
   
   ลบไฟล์ที่ต้องการ กรณี gitignore ทำงานไม่ถูกต้อง
   - การที่ gitignore ยังทำงานในบางไฟล์ที่เราแอดเอาไว้ เพราะ ใน repo ของเรายังมีไฟล์พวกนนั้นเก็บไว้อยู่ จึงต้องทำการลบก่อนเพื่อให้ repo จดจำใหม่
   อ้างอิง
   https://stackoverflow.com/questions/6030530/git-ignore-not-working-in-a-directory
   git rm --cached system/application/config/config.php modules/recaptcha/config/recaptcha.php
   
   หยุดติดตามไฟล์เดี่ยว
   git update-index --assume-unchanged <file>
   
   กลับมาติดตามใหม่
   git update-index --no-assume-unchanged <file>
   
   อ้างอิง
   https://stackoverflow.com/questions/1139762/ignore-files-that-have-already-been-committed-to-a-git-repository
