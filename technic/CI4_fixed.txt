#
# Codeigniter 4 วิธีลบ Public ออกจาก URL
#
 1. ในโฟลเด้อ public ให้ย้าย ไฟล์ index.php, .htaccess และ robot.txt ออกมาไว้ที่ root ของโปรเจค จากนั้นลบโฟลเด้อ public ทิ้งได้เลย
 2. เปิดไฟล์ index.php จากนั้นให้แก้ไขตัวแปร pathsPath ให้พาธถูกต้อง
	จาก
	$pathsPath = realpath(FCPATH . '../app/Config/Paths.php');
	เป็น
	$pathsPath = realpath(FCPATH . 'app/Config/Paths.php');

    
 
#
# OS window
# ให้ปรับไฟล์ web.config ทั้งบน root และ ./public
#
 <?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <system.webServer>
        <directoryBrowse enabled="false"/>
        <rewrite>
            <rules>
            <rule name="APPLICATION: https://chokchaiinternational.com/" patternSyntax="Wildcard">
                <match url="*"/>
                    <conditions>
                        <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true"/>
                        <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true"/>
                    </conditions>
                <action type="Rewrite" url="index.php"/>
            </rule></rules>
        </rewrite>
    </system.webServer>
</configuration>

 
 #
 # JWT setup
 #
	//	ติดตั้ง composer
	composer require firebase/php-jwt
	
	//After installing the jwt package, add JWT_SECRET on the .env file
	#--------------------------------------------------------------------
	# JWT
	#--------------------------------------------------------------------
	JWT_SECRET = 'JWT SECRET KEY SAMPLE HERE'
	
	// add code JWT generate ที่ controller
	$key = getenv('JWT_SECRET');
	$iat = time(); // current timestamp value
	$exp = $iat + 3600;

	$payload = array(
		"iss" => "Issuer of the JWT",
		"aud" => "Audience that the JWT",
		"sub" => "Subject of the JWT",
		"iat" => $iat, //Time the JWT issued at
		"exp" => $exp, // Expiration time of token
		"email" => $user['email'],
	);
	  
	$token = JWT::encode($payload, $key, 'HS256');
	
	$response = [
		'message' => 'Login Succesful',
		'token' => $token
	];
	  
	return $this->respond($response, 200);
	
	// create filter : app/Filters/AuthFilter.php
	namespace App\Filters;
  
	use CodeIgniter\Filters\FilterInterface;
	use CodeIgniter\HTTP\RequestInterface;
	use CodeIgniter\HTTP\ResponseInterface;
	use Firebase\JWT\JWT;
	use Firebase\JWT\Key;
	  
	class AuthFilter implements FilterInterface
	{
		/**
		 * Do whatever processing this filter needs to do.
		 * By default it should not return anything during
		 * normal execution. However, when an abnormal state
		 * is found, it should return an instance of
		 * CodeIgniter\HTTP\Response. If it does, script
		 * execution will end and that Response will be
		 * sent back to the client, allowing for error pages,
		 * redirects, etc.
		 *
		 * @param RequestInterface $request
		 * @param array|null       $arguments
		 *
		 * @return mixed
		 */
		public function before(RequestInterface $request, $arguments = null)
		{
			$key = getenv('JWT_SECRET');
			$header = $request->getHeader("Authorization");
			$token = null;
	  
			// extract the token from the header
			if(!empty($header)) {
				if (preg_match('/Bearer\s(\S+)/', $header, $matches)) {
					$token = $matches[1];
				}
			}
	  
			// check if token is null or empty
			if(is_null($token) || empty($token)) {
				$response = service('response');
				$response->setBody('Access denied');
				$response->setStatusCode(401);
				return $response;
			}
	  
			try {
				// $decoded = JWT::decode($token, $key, array("HS256"));
				$decoded = JWT::decode($token, new Key($key, 'HS256'));
			} catch (Exception $ex) {
				$response = service('response');
				$response->setBody('Access denied');
				$response->setStatusCode(401);
				return $response;
			}
		}
	  
		/**
		 * Allows After filters to inspect and modify the response
		 * object as needed. This method does not allow any way
		 * to stop execution of other after filters, short of
		 * throwing an Exception or Error.
		 *
		 * @param RequestInterface  $request
		 * @param ResponseInterface $response
		 * @param array|null        $arguments
		 *
		 * @return mixed
		 */
		public function after(RequestInterface $request, ResponseInterface $response, $arguments = null)
		{
			//
		}
	}
	
	// app/Config/Filters.php
	public $aliases = [
        'csrf'     => CSRF::class,
        'toolbar'  => DebugToolbar::class,
        'honeypot' => Honeypot::class,
        'authFilter' => \App\Filters\AuthFilter::class,
    ];
	
	// app/Config/Routes.php
	$routes->group("api", function ($routes) {
		$routes->post("register", "Register::index");
		$routes->post("login", "Login::index");	//	controller ที่ encode JWT
		$routes->get("users", "User::index", ['filter' => 'authFilter']);	// แสดงข้อมูลโดยผ่านตัวกรอง JWT ที่สร้างไว้
	});
	
	// อ้างอิง
	https://www.binaryboxtuts.com/php-tutorials/codeigniter-4-json-web-tokenjwt-authentication/